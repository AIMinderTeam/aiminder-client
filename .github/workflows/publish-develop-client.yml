name: Publish Develop Client

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  CONTAINER_CONTEXT_PATH: ''
  DOCKERFILE_PATH: 'docker/Dockerfile'
  IMAGE_NAME: 'aiminder-server'
  IMAGE_TAG: 'develop-client'
  EC2_SSH_KEY: ${{ secrets.DEVELOP_EC2_SSH_PRIVATE_KEY }}
  EC2_USER: ${{ secrets.DEVELOP_EC2_SSH_USER }}
  EC2_HOST: ${{ secrets.DEVELOP_EC2_HOST }}
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      image-tag: ${{ steps.meta.outputs.image-tag }}
      build-start-time: ${{ steps.timing.outputs.build-start-time }}
      build-end-time: ${{ steps.timing.outputs.build-end-time }}

    steps:
      - name: Record build start time
        id: timing
        run: |
          BUILD_START_TIME=$(date -u '+%Y-%m-%dT%H:%M:%S.%3NZ')
          echo "build-start-time=$BUILD_START_TIME" >> $GITHUB_OUTPUT
          echo "🚀 Build started at $BUILD_START_TIME"

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run build tests
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Generate image metadata
        id: meta
        run: |
          CURRENT_DATE_TIME=$(date "+%Y%m%d%H%M%S")
          IMAGE_TAG_WITH_DATE="${{ env.IMAGE_TAG }}-$CURRENT_DATE_TIME"
          echo "image-tag=$IMAGE_TAG_WITH_DATE" >> $GITHUB_OUTPUT
          echo "Generated image tag: $IMAGE_TAG_WITH_DATE"

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTAINER_CONTEXT_PATH }}
          file: ${{ env.DOCKERFILE_PATH }}
          platforms: linux/amd64
          tags: ${{ env.DOCKER_HUB_USERNAME}}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.image-tag }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Record build end time
        run: |
          BUILD_END_TIME=$(date -u '+%Y-%m-%dT%H:%M:%S.%3NZ')
          echo "build-end-time=$BUILD_END_TIME" >> $GITHUB_OUTPUT
          echo "✅ Build completed at $BUILD_END_TIME"

      - name: Upload build artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.run_number }}
          path: |
            dist/
            node_modules/.cache/
          retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Record deploy start time
        run: |
          DEPLOY_START_TIME=$(date -u '+%Y-%m-%dT%H:%M:%S.%3NZ')
          echo "🚀 Deploy started at $DEPLOY_START_TIME"

      - name: Display build metrics
        run: |
          echo "📊 Build Metrics:"
          echo "   Start time: ${{ needs.build.outputs.build-start-time }}"
          echo "   End time: ${{ needs.build.outputs.build-end-time }}"
          echo "   Image tag: ${{ needs.build.outputs.image-tag }}"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            echo "🔄 Updating environment configuration..."
            cd /home/${{ env.EC2_USER }}
            
            # 홈 디렉토리의 .env 파일 업데이트 (CLIENT_TAG만)
            if [ ! -f .env ]; then
              # 초기 배포 시 기본값으로 설정
              echo "초기 .env 파일 생성 중..."
            
              cat > .env << EOF
            DEVELOP_AIMINDER_SERVER_TAG=develop-server-latest
            DEVELOP_AIMINDER_CLIENT_TAG=${{ needs.build.outputs.image-tag }}
            EOF
              echo "⚠️  초기 배포: SERVER_TAG를 기본값(develop-server-latest)으로 설정했습니다."
              echo "   서버 워크플로우 실행 후 자동으로 업데이트됩니다."
            else
              # 기존 파일에서 CLIENT_TAG만 업데이트
              echo "기존 .env 파일에서 CLIENT_TAG 업데이트 중..."
              if grep -q "^DEVELOP_AIMINDER_CLIENT_TAG=" .env; then
                sed -i "s/^DEVELOP_AIMINDER_CLIENT_TAG=.*/DEVELOP_AIMINDER_CLIENT_TAG=${{ needs.build.outputs.image-tag }}/" .env
              else
                echo "DEVELOP_AIMINDER_CLIENT_TAG=${{ needs.build.outputs.image-tag }}" >> .env
              fi
            
              # SERVER_TAG가 없으면 기본값으로 추가
              if ! grep -q "^DEVELOP_AIMINDER_SERVER_TAG=" .env; then
                echo "DEVELOP_AIMINDER_SERVER_TAG=develop-server-latest" >> .env
                echo "⚠️  SERVER_TAG 누락: 기본값(develop-server-latest)으로 설정했습니다."
                echo "   서버 워크플로우 실행 후 자동으로 업데이트됩니다."
              else
                echo "✅ SERVER_TAG 보존됨"
              fi
            fi
            
            # 현재 환경 변수 상태 출력
            echo "=== 현재 환경 변수 ==="
            cat .env
            
            echo "🐳 Restarting containers..."
            cd /home/${{ env.EC2_USER }}/aiminder-deployment
            
            # 상위 디렉토리의 .env 파일 사용
            sudo docker-compose --env-file ../.env -f docker-compose-ssl.yml down
            sudo docker-compose --env-file ../.env -f docker-compose-ssl.yml up -d
            
            echo "✅ Checking container status..."
            sleep 5
            if ! sudo docker-compose --env-file ../.env -f docker-compose-ssl.yml ps | grep -q "Up"; then
              echo "❌ Container failed to start properly"
              sudo docker-compose --env-file ../.env -f docker-compose-ssl.yml logs --tail=50
              exit 1
            fi
            
            echo "🎉 Deployment completed successfully!"

      - name: Record deploy end time
        if: always()
        run: |
          DEPLOY_END_TIME=$(date -u '+%Y-%m-%dT%H:%M:%S.%3NZ')
          echo "✅ Deploy completed at $DEPLOY_END_TIME"

      - name: Output failure logs on deploy failure
        if: failure()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            echo "❌ Deployment failed. Container logs:"
            cd /home/${{ env.EC2_USER }}/aiminder-deployment
            sudo docker-compose --env-file ../.env -f docker-compose-ssl.yml logs --tail=100
